"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var DiscordModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiscordModule = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const rxjs_1 = require("rxjs");
const inject_discord_client_constant_1 = require("./decorators/client/inject-discord-client.constant");
const discord_client_provider_alias_1 = require("./definitions/constants/discord-client-provider-alias");
const discord_command_provider_alias_1 = require("./definitions/constants/discord-command-provider-alias");
const discord_module_contant_1 = require("./definitions/constants/discord-module.contant");
const reflect_metadata_provider_alias_1 = require("./definitions/constants/reflect-metadata-provider-alias");
const discord_host_module_1 = require("./discord-host.module");
const collector_register_1 = require("./explorers/collector/collector-register");
const collector_explorer_1 = require("./explorers/collector/collector.explorer");
const interaction_collector_strategy_1 = require("./explorers/collector/strategy/interaction-collector.strategy");
const message_collector_strategy_1 = require("./explorers/collector/strategy/message-collector.strategy");
const react_collector_strategy_1 = require("./explorers/collector/strategy/react-collector.strategy");
const command_explorer_1 = require("./explorers/command/command.explorer");
const event_explorer_1 = require("./explorers/event/event.explorer");
const filter_explorer_1 = require("./explorers/filter/filter.explorer");
const guard_explorer_1 = require("./explorers/guard/guard.explorer");
const middleware_explorer_1 = require("./explorers/middleware/middleware.explorer");
const option_explorer_1 = require("./explorers/option/option.explorer");
const param_explorer_1 = require("./explorers/param/param.explorer");
const pipe_explorer_1 = require("./explorers/pipe/pipe.explorer");
const prefix_command_explorer_1 = require("./explorers/prefix-command/prefix-command.explorer");
const discord_client_provider_1 = require("./providers/discord-client.provider");
const discord_command_provider_1 = require("./providers/discord-command.provider");
const reflect_metadata_provider_1 = require("./providers/reflect-metadata.provider");
const build_application_command_service_1 = require("./services/build-application-command.service");
const client_service_1 = require("./services/client.service");
const command_tree_service_1 = require("./services/command-tree.service");
const dto_service_1 = require("./services/dto.service");
const explorer_service_1 = require("./services/explorer.service");
const global_provider_service_1 = require("./services/global-provider.service");
const instantiation_service_1 = require("./services/instantiation.service");
const register_command_service_1 = require("./services/register-command.service");
let DiscordModule = DiscordModule_1 = class DiscordModule {
    static forRootAsync(options) {
        return {
            module: DiscordModule_1,
            imports: options.imports || [],
            providers: [
                ...DiscordModule_1.createAsyncDiscordOptionProviders(options),
                ...DiscordModule_1.createExportedForRootProviders(options),
                instantiation_service_1.InstantiationService,
                register_command_service_1.RegisterCommandService,
                option_explorer_1.OptionExplorer,
                filter_explorer_1.FilterExplorer,
                middleware_explorer_1.MiddlewareExplorer,
                pipe_explorer_1.PipeExplorer,
                guard_explorer_1.GuardExplorer,
                param_explorer_1.ParamExplorer,
                command_explorer_1.CommandExplorer,
                prefix_command_explorer_1.PrefixCommandExplorer,
                dto_service_1.DtoService,
                event_explorer_1.EventExplorer,
                explorer_service_1.ExplorerService,
                build_application_command_service_1.BuildApplicationCommandService,
                global_provider_service_1.GlobalProviderService,
                command_tree_service_1.CommandTreeService,
                collector_explorer_1.CollectorExplorer,
                react_collector_strategy_1.ReactCollectorStrategy,
                message_collector_strategy_1.MessageCollectorStrategy,
                interaction_collector_strategy_1.InteractionCollectorStrategy,
                collector_register_1.CollectorRegister,
            ],
            exports: [
                discord_client_provider_1.DiscordClientProvider,
                reflect_metadata_provider_1.ReflectMetadataProvider,
                discord_command_provider_1.DiscordCommandProvider,
                inject_discord_client_constant_1.INJECT_DISCORD_CLIENT,
            ],
        };
    }
    static forFeature() {
        return {
            module: DiscordModule_1,
            providers: [
                {
                    provide: inject_discord_client_constant_1.INJECT_DISCORD_CLIENT,
                    useFactory: () => (0, rxjs_1.firstValueFrom)(DiscordModule_1.initSubject), // Should only be called after DiscordClientService init
                },
                {
                    provide: discord_client_provider_1.DiscordClientProvider,
                    useExisting: discord_client_provider_alias_1.DISCORD_CLIENT_PROVIDER_ALIAS,
                },
                {
                    provide: reflect_metadata_provider_1.ReflectMetadataProvider,
                    useExisting: reflect_metadata_provider_alias_1.REFLECT_METADATA_PROVIDER_ALIAS,
                },
                {
                    provide: discord_command_provider_1.DiscordCommandProvider,
                    useExisting: discord_command_provider_alias_1.DISCORD_COMMAND_PROVIDER_ALIAS,
                },
            ],
            exports: [
                discord_client_provider_1.DiscordClientProvider,
                reflect_metadata_provider_1.ReflectMetadataProvider,
                discord_command_provider_1.DiscordCommandProvider,
                inject_discord_client_constant_1.INJECT_DISCORD_CLIENT,
            ],
        };
    }
    static createExportedForRootProviders(options) {
        return [
            {
                provide: discord_client_provider_1.DiscordClientProvider,
                useFactory: (discordClientService, discordClientProvider, discordModuleOptions) => __awaiter(this, void 0, void 0, function* () {
                    discordClientService.initClient(discordModuleOptions);
                    yield discordClientService.setupClient(options.setupClientFactory);
                    DiscordModule_1.initSubject.next(discordClientService.getClient());
                    return discordClientProvider;
                }),
                inject: [
                    client_service_1.ClientService,
                    discord_client_provider_alias_1.DISCORD_CLIENT_PROVIDER_ALIAS,
                    discord_module_contant_1.DISCORD_MODULE_OPTIONS,
                ],
            },
            {
                provide: reflect_metadata_provider_1.ReflectMetadataProvider,
                useExisting: reflect_metadata_provider_alias_1.REFLECT_METADATA_PROVIDER_ALIAS,
            },
            {
                provide: discord_command_provider_1.DiscordCommandProvider,
                useExisting: discord_command_provider_alias_1.DISCORD_COMMAND_PROVIDER_ALIAS,
            },
            {
                provide: inject_discord_client_constant_1.INJECT_DISCORD_CLIENT,
                useFactory: (discordClientProvider) => discordClientProvider.getClient(),
                inject: [discord_client_provider_1.DiscordClientProvider],
            },
        ];
    }
    static createAsyncDiscordOptionProviders(options) {
        if (options) {
            if (options.useFactory) {
                return [
                    {
                        provide: discord_module_contant_1.DISCORD_MODULE_OPTIONS,
                        useFactory: options.useFactory,
                        inject: options.inject || [],
                    },
                ];
            }
            else {
                // For useClass and useExisting...
                const useClass = options.useClass;
                const providers = [
                    {
                        provide: discord_module_contant_1.DISCORD_MODULE_OPTIONS,
                        useFactory: (optionsFactory) => __awaiter(this, void 0, void 0, function* () { return optionsFactory.createDiscordOptions(); }),
                        inject: [options.useExisting || options.useClass],
                    },
                ];
                if (useClass) {
                    providers.push({
                        provide: useClass,
                        useClass,
                    });
                }
                return providers;
            }
        }
        else {
            return [
                {
                    provide: discord_module_contant_1.DISCORD_MODULE_OPTIONS,
                    useValue: {},
                },
            ];
        }
    }
};
Object.defineProperty(DiscordModule, "initSubject", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: new rxjs_1.Subject()
});
DiscordModule = DiscordModule_1 = __decorate([
    (0, common_1.Module)({
        imports: [discord_host_module_1.DiscordHostModule, core_1.DiscoveryModule],
    })
], DiscordModule);
exports.DiscordModule = DiscordModule;
//# sourceMappingURL=discord.module.js.map