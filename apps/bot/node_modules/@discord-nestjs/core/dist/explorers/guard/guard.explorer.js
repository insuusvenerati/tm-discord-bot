"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GuardExplorer = void 0;
const common_1 = require("@nestjs/common");
const reflect_metadata_provider_1 = require("../../providers/reflect-metadata.provider");
const instantiation_service_1 = require("../../services/instantiation.service");
const option_service_1 = require("../../services/option.service");
let GuardExplorer = class GuardExplorer {
    constructor(metadataProvider, discordOptionService, instantiationService) {
        Object.defineProperty(this, "metadataProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: metadataProvider
        });
        Object.defineProperty(this, "discordOptionService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: discordOptionService
        });
        Object.defineProperty(this, "instantiationService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: instantiationService
        });
        Object.defineProperty(this, "cachedGuards", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new WeakMap()
        });
    }
    explore(options) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const { instance, methodName } = options;
            const globalGuards = this.discordOptionService.getClientData().useGuards;
            const classGuards = (_a = this.metadataProvider.getUseGuardsDecoratorMetadata(instance)) !== null && _a !== void 0 ? _a : [];
            const methodGuards = (_b = this.metadataProvider.getUseGuardsDecoratorMetadata(instance, methodName)) !== null && _b !== void 0 ? _b : [];
            const classType = instance.constructor;
            if (classGuards.length === 0 && methodGuards.length === 0) {
                if (globalGuards.length !== 0)
                    this.cachedGuards.set(classType, {
                        globalGuards,
                        classGuards: [],
                        methodGuards: {},
                    });
                return;
            }
            const hostModule = this.instantiationService.getHostModule(instance);
            const methodGuardInstances = yield this.instantiationService.exploreInstances(methodGuards, hostModule);
            if (this.cachedGuards.has(classType))
                this.cachedGuards.get(classType).methodGuards[methodName] =
                    methodGuardInstances;
            else {
                const classGuardInstances = yield this.instantiationService.exploreInstances(classGuards, hostModule);
                this.cachedGuards.set(classType, {
                    methodGuards: { [methodName]: methodGuardInstances },
                    classGuards: classGuardInstances,
                    globalGuards,
                });
            }
        });
    }
    applyGuard(options) {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { instance, methodName, event, eventArgs } = options;
            const classType = instance.constructor;
            if (!this.cachedGuards.has(classType))
                return true;
            const { globalGuards, classGuards, methodGuards } = this.cachedGuards.get(classType);
            const guards = [
                ...globalGuards,
                ...classGuards,
                ...(methodGuards[methodName] || []),
            ];
            try {
                for (var guards_1 = __asyncValues(guards), guards_1_1; guards_1_1 = yield guards_1.next(), !guards_1_1.done;) {
                    const guard = guards_1_1.value;
                    const result = yield guard.canActive(event, eventArgs);
                    if (!result)
                        return false;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (guards_1_1 && !guards_1_1.done && (_a = guards_1.return)) yield _a.call(guards_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return true;
        });
    }
};
GuardExplorer = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [reflect_metadata_provider_1.ReflectMetadataProvider,
        option_service_1.OptionService,
        instantiation_service_1.InstantiationService])
], GuardExplorer);
exports.GuardExplorer = GuardExplorer;
//# sourceMappingURL=guard.explorer.js.map