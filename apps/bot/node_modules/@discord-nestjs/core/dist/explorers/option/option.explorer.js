"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionExplorer = void 0;
const common_1 = require("@nestjs/common");
const discord_js_1 = require("discord.js");
const param_type_1 = require("../../definitions/types/param.type");
const reflect_metadata_provider_1 = require("../../providers/reflect-metadata.provider");
let OptionExplorer = class OptionExplorer {
    constructor(metadataProvider) {
        Object.defineProperty(this, "metadataProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: metadataProvider
        });
    }
    explore(dtoInstance) {
        const optionMetadata = {};
        Object.keys(dtoInstance).map((propertyKey) => {
            var _a;
            const paramDecoratorMetadata = this.metadataProvider.getParamDecoratorMetadata(dtoInstance, propertyKey);
            const channelTypes = this.getChannelOptions(dtoInstance, propertyKey);
            const applicationOptionType = channelTypes
                ? discord_js_1.ApplicationCommandOptionType.Channel
                : this.getApplicationOptionTypeByArg(dtoInstance, propertyKey, paramDecoratorMetadata);
            optionMetadata[propertyKey] = {
                param: {
                    name: (_a = paramDecoratorMetadata.name) !== null && _a !== void 0 ? _a : propertyKey,
                    description: paramDecoratorMetadata.description,
                    type: applicationOptionType,
                    maxValue: paramDecoratorMetadata.maxValue,
                    minValue: paramDecoratorMetadata.minValue,
                    autocomplete: paramDecoratorMetadata.autocomplete,
                    required: paramDecoratorMetadata.required,
                },
                choice: this.getChoiceOptions(dtoInstance, propertyKey),
                channelTypes,
            };
        });
        return optionMetadata;
    }
    getChoiceOptions(dtoInstance, propertyKey) {
        const choiceData = this.metadataProvider.getChoiceDecoratorMetadata(dtoInstance, propertyKey);
        if (!choiceData)
            return;
        const isMap = choiceData instanceof Map;
        const entries = isMap
            ? Array.from(choiceData)
            : Object.entries(choiceData).filter(([key]) => !(key in Object.keys(choiceData)));
        return entries.map(([name, value]) => ({ name, value }));
    }
    getChannelOptions(dtoInstance, propertyKey) {
        const channelTypes = this.metadataProvider.getChannelDecoratorMetadata(dtoInstance, propertyKey);
        if (!channelTypes)
            return;
        return channelTypes;
    }
    getApplicationOptionTypeByArg(dtoInstance, propertyKey, argDecoratorOptions) {
        switch (argDecoratorOptions.type) {
            case param_type_1.ParamType.STRING:
                return discord_js_1.ApplicationCommandOptionType.String;
            case param_type_1.ParamType.BOOLEAN:
                return discord_js_1.ApplicationCommandOptionType.Boolean;
            case param_type_1.ParamType.INTEGER:
                return discord_js_1.ApplicationCommandOptionType.Integer;
            case param_type_1.ParamType.NUMBER:
                return discord_js_1.ApplicationCommandOptionType.Number;
            case param_type_1.ParamType.ROLE:
                return discord_js_1.ApplicationCommandOptionType.Role;
            case param_type_1.ParamType.MENTIONABLE:
                return discord_js_1.ApplicationCommandOptionType.Mentionable;
            case param_type_1.ParamType.USER:
                return discord_js_1.ApplicationCommandOptionType.User;
            case param_type_1.ParamType.ATTACHMENT:
                return discord_js_1.ApplicationCommandOptionType.Attachment;
            default: {
                const metatype = this.metadataProvider.getPropertyTypeMetadata(dtoInstance, propertyKey);
                if (metatype.name === 'String')
                    return discord_js_1.ApplicationCommandOptionType.String;
                if (metatype.name === 'Boolean')
                    return discord_js_1.ApplicationCommandOptionType.Boolean;
                throw new Error(`Could not determine field type "${propertyKey}" in class "${dtoInstance.constructor.name}"`);
            }
        }
    }
};
OptionExplorer = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [reflect_metadata_provider_1.ReflectMetadataProvider])
], OptionExplorer);
exports.OptionExplorer = OptionExplorer;
//# sourceMappingURL=option.explorer.js.map