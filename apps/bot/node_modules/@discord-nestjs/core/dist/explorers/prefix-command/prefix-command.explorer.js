"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrefixCommandExplorer = void 0;
const common_1 = require("@nestjs/common");
const reflect_metadata_provider_1 = require("../../providers/reflect-metadata.provider");
const client_service_1 = require("../../services/client.service");
const dto_service_1 = require("../../services/dto.service");
const option_service_1 = require("../../services/option.service");
const collector_explorer_1 = require("../collector/collector.explorer");
const filter_explorer_1 = require("../filter/filter.explorer");
const guard_explorer_1 = require("../guard/guard.explorer");
const middleware_explorer_1 = require("../middleware/middleware.explorer");
const pipe_explorer_1 = require("../pipe/pipe.explorer");
let PrefixCommandExplorer = class PrefixCommandExplorer {
    constructor(metadataProvider, discordClientService, discordOptionService, middlewareExplorer, guardExplorer, filterExplorer, pipeExplorer, collectorExplorer, dtoService) {
        Object.defineProperty(this, "metadataProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: metadataProvider
        });
        Object.defineProperty(this, "discordClientService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: discordClientService
        });
        Object.defineProperty(this, "discordOptionService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: discordOptionService
        });
        Object.defineProperty(this, "middlewareExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: middlewareExplorer
        });
        Object.defineProperty(this, "guardExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: guardExplorer
        });
        Object.defineProperty(this, "filterExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: filterExplorer
        });
        Object.defineProperty(this, "pipeExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: pipeExplorer
        });
        Object.defineProperty(this, "collectorExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: collectorExplorer
        });
        Object.defineProperty(this, "dtoService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: dtoService
        });
        Object.defineProperty(this, "logger", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new common_1.Logger()
        });
    }
    explore({ instance, methodName, }) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            const metadata = this.metadataProvider.getOnCommandDecoratorMetadata(instance, methodName);
            if (!metadata)
                return;
            const discordOptions = this.discordOptionService.getClientData();
            const { prefixGlobalOptions } = discordOptions;
            const { name, prefix = discordOptions.prefix, isRemovePrefix = (_a = prefixGlobalOptions === null || prefixGlobalOptions === void 0 ? void 0 : prefixGlobalOptions.isRemovePrefix) !== null && _a !== void 0 ? _a : true, isIgnoreBotMessage = (_b = prefixGlobalOptions === null || prefixGlobalOptions === void 0 ? void 0 : prefixGlobalOptions.isIgnoreBotMessage) !== null && _b !== void 0 ? _b : true, isRemoveCommandName = (_c = prefixGlobalOptions === null || prefixGlobalOptions === void 0 ? void 0 : prefixGlobalOptions.isRemoveCommandName) !== null && _c !== void 0 ? _c : true, isRemoveMessage = (_d = prefixGlobalOptions === null || prefixGlobalOptions === void 0 ? void 0 : prefixGlobalOptions.isRemoveMessage) !== null && _d !== void 0 ? _d : false, } = metadata;
            if (!prefix)
                throw new Error(`Prefix for ${name} command not found`);
            this.logger.log(`Create "${name}" command with prefix "${prefix}"`, instance.constructor.name);
            const dtoInstance = yield this.dtoService.createDtoInstance(instance, methodName);
            const event = 'messageCreate';
            this.discordClientService
                .getClient()
                .on(event, (message) => __awaiter(this, void 0, void 0, function* () {
                const eventArgs = [message];
                try {
                    if (isIgnoreBotMessage && message.author.bot)
                        return;
                    let messageContent = message.content.trim();
                    const messagePrefix = this.getPrefix(messageContent, prefix);
                    const commandName = this.getCommandName(messageContent, messagePrefix.length);
                    if (messagePrefix !== prefix || commandName !== name)
                        return; // not suitable for handler
                    //#region handle message
                    if (isRemovePrefix)
                        messageContent = messageContent.slice(prefix.length);
                    if (isRemoveCommandName)
                        messageContent = isRemovePrefix
                            ? messageContent.slice(prefix.length + commandName.length)
                            : messageContent.substring(0, prefix.length) +
                                messageContent.substring(prefix.length + commandName.length);
                    message.content = messageContent.trim();
                    //#endregion
                    //#region apply middleware, guard, pipe
                    yield this.middlewareExplorer.applyMiddleware(event, eventArgs);
                    const isAllowFromGuards = yield this.guardExplorer.applyGuard({
                        instance,
                        methodName,
                        event,
                        eventArgs,
                    });
                    if (!isAllowFromGuards)
                        return;
                    const pipeResult = yield this.pipeExplorer.applyPipe({
                        instance,
                        methodName,
                        event,
                        metatype: dtoInstance === null || dtoInstance === void 0 ? void 0 : dtoInstance.constructor,
                        eventArgs,
                        initValue: message,
                        commandNode: { dtoInstance },
                    });
                    //#endregion
                    const collectors = yield this.collectorExplorer.applyCollector({
                        instance,
                        methodName,
                        event,
                        eventArgs,
                    });
                    const executionContext = {
                        collectors,
                    };
                    const handlerArgs = dtoInstance ? [pipeResult, message] : eventArgs;
                    const replyResult = yield instance[methodName](...handlerArgs, executionContext);
                    if (replyResult)
                        yield message.reply(replyResult);
                    if (isRemoveMessage)
                        yield this.removeMessageFromChannel(message);
                }
                catch (exception) {
                    const isTrowException = yield this.filterExplorer.applyFilter({
                        instance,
                        methodName,
                        event,
                        eventArgs,
                        exception,
                    });
                    if (isTrowException)
                        throw exception;
                }
            }));
        });
    }
    getPrefix(messageContent, prefix) {
        return messageContent.slice(0, prefix.length);
    }
    getCommandName(messageContent, prefixLength) {
        const messageWithoutPrefix = messageContent.slice(prefixLength);
        const command = messageWithoutPrefix.split(' ').shift();
        return command || '';
    }
    removeMessageFromChannel(message) {
        return __awaiter(this, void 0, void 0, function* () {
            yield message.delete();
        });
    }
};
PrefixCommandExplorer = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [reflect_metadata_provider_1.ReflectMetadataProvider,
        client_service_1.ClientService,
        option_service_1.OptionService,
        middleware_explorer_1.MiddlewareExplorer,
        guard_explorer_1.GuardExplorer,
        filter_explorer_1.FilterExplorer,
        pipe_explorer_1.PipeExplorer,
        collector_explorer_1.CollectorExplorer,
        dto_service_1.DtoService])
], PrefixCommandExplorer);
exports.PrefixCommandExplorer = PrefixCommandExplorer;
//# sourceMappingURL=prefix-command.explorer.js.map