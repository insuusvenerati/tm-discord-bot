"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventExplorer = void 0;
const common_1 = require("@nestjs/common");
const reflect_metadata_provider_1 = require("../../providers/reflect-metadata.provider");
const client_service_1 = require("../../services/client.service");
const dto_service_1 = require("../../services/dto.service");
const collector_explorer_1 = require("../collector/collector.explorer");
const filter_explorer_1 = require("../filter/filter.explorer");
const guard_explorer_1 = require("../guard/guard.explorer");
const middleware_explorer_1 = require("../middleware/middleware.explorer");
const pipe_explorer_1 = require("../pipe/pipe.explorer");
let EventExplorer = class EventExplorer {
    constructor(metadataProvider, discordClientService, middlewareExplorer, guardExplorer, filterExplorer, pipeExplorer, collectorExplorer, dtoService) {
        Object.defineProperty(this, "metadataProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: metadataProvider
        });
        Object.defineProperty(this, "discordClientService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: discordClientService
        });
        Object.defineProperty(this, "middlewareExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: middlewareExplorer
        });
        Object.defineProperty(this, "guardExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: guardExplorer
        });
        Object.defineProperty(this, "filterExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: filterExplorer
        });
        Object.defineProperty(this, "pipeExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: pipeExplorer
        });
        Object.defineProperty(this, "collectorExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: collectorExplorer
        });
        Object.defineProperty(this, "dtoService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: dtoService
        });
        Object.defineProperty(this, "logger", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new common_1.Logger()
        });
    }
    explore(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { instance, methodName } = options;
            let eventMethod = 'on';
            let metadata = this.metadataProvider.getOnEventDecoratorMetadata(instance, methodName);
            if (!metadata) {
                metadata = this.metadataProvider.getOnceEventDecoratorMetadata(instance, methodName);
                eventMethod = 'once';
                if (!metadata)
                    return;
            }
            const { event } = metadata;
            this.logger.log(`Subscribe to event(${eventMethod}): ${event}`, instance.constructor.name);
            const dtoInstance = yield this.dtoService.createDtoInstance(instance, methodName);
            this.discordClientService
                .getClient()[eventMethod](event, (...eventArgs) => __awaiter(this, void 0, void 0, function* () {
                try {
                    //#region apply middleware, guard, pipe
                    yield this.middlewareExplorer.applyMiddleware(event, eventArgs);
                    const isAllowFromGuards = yield this.guardExplorer.applyGuard({
                        instance,
                        methodName,
                        event,
                        eventArgs,
                    });
                    if (!isAllowFromGuards)
                        return;
                    const pipeResult = yield this.pipeExplorer.applyPipe({
                        instance,
                        methodName,
                        event,
                        eventArgs,
                        initValue: eventArgs,
                        metatype: dtoInstance === null || dtoInstance === void 0 ? void 0 : dtoInstance.constructor,
                        commandNode: { dtoInstance },
                    });
                    //#endregion
                    const collectors = yield this.collectorExplorer.applyCollector({
                        instance,
                        methodName,
                        event,
                        eventArgs,
                    });
                    const executionContext = {
                        collectors,
                    };
                    const handlerArgs = dtoInstance
                        ? [pipeResult, ...eventArgs]
                        : eventArgs;
                    yield instance[methodName](...handlerArgs, executionContext);
                }
                catch (exception) {
                    const isTrowException = yield this.filterExplorer.applyFilter({
                        instance,
                        methodName,
                        event,
                        eventArgs,
                        exception,
                    });
                    if (isTrowException)
                        throw exception;
                }
            }));
        });
    }
};
EventExplorer = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [reflect_metadata_provider_1.ReflectMetadataProvider,
        client_service_1.ClientService,
        middleware_explorer_1.MiddlewareExplorer,
        guard_explorer_1.GuardExplorer,
        filter_explorer_1.FilterExplorer,
        pipe_explorer_1.PipeExplorer,
        collector_explorer_1.CollectorExplorer,
        dto_service_1.DtoService])
], EventExplorer);
exports.EventExplorer = EventExplorer;
//# sourceMappingURL=event.explorer.js.map