"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var CommandExplorer_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandExplorer = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const discord_js_1 = require("discord.js");
const discord_command_provider_1 = require("../../providers/discord-command.provider");
const reflect_metadata_provider_1 = require("../../providers/reflect-metadata.provider");
const build_application_command_service_1 = require("../../services/build-application-command.service");
const client_service_1 = require("../../services/client.service");
const command_tree_service_1 = require("../../services/command-tree.service");
const collector_explorer_1 = require("../collector/collector.explorer");
const filter_explorer_1 = require("../filter/filter.explorer");
const guard_explorer_1 = require("../guard/guard.explorer");
const middleware_explorer_1 = require("../middleware/middleware.explorer");
const pipe_explorer_1 = require("../pipe/pipe.explorer");
let CommandExplorer = CommandExplorer_1 = class CommandExplorer {
    constructor(discordClientService, metadataProvider, middlewareExplorer, discordCommandProvider, guardExplorer, moduleRef, pipeExplorer, buildApplicationCommandService, commandTreeService, filterExplorer, collectorExplorer) {
        Object.defineProperty(this, "discordClientService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: discordClientService
        });
        Object.defineProperty(this, "metadataProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: metadataProvider
        });
        Object.defineProperty(this, "middlewareExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: middlewareExplorer
        });
        Object.defineProperty(this, "discordCommandProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: discordCommandProvider
        });
        Object.defineProperty(this, "guardExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: guardExplorer
        });
        Object.defineProperty(this, "moduleRef", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: moduleRef
        });
        Object.defineProperty(this, "pipeExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: pipeExplorer
        });
        Object.defineProperty(this, "buildApplicationCommandService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: buildApplicationCommandService
        });
        Object.defineProperty(this, "commandTreeService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: commandTreeService
        });
        Object.defineProperty(this, "filterExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: filterExplorer
        });
        Object.defineProperty(this, "collectorExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: collectorExplorer
        });
    }
    explore({ instance }) {
        return __awaiter(this, void 0, void 0, function* () {
            const metadata = this.metadataProvider.getCommandDecoratorMetadata(instance);
            if (!metadata)
                return;
            const { name } = metadata;
            const event = 'interactionCreate';
            const methodName = 'handler';
            const applicationCommandData = yield this.buildApplicationCommandService.exploreCommandOptions(instance, methodName, metadata);
            if (common_1.Logger.isLevelEnabled('debug')) {
                common_1.Logger.debug('Slash command options', CommandExplorer_1.name);
                common_1.Logger.debug(applicationCommandData, CommandExplorer_1.name);
            }
            this.discordCommandProvider.addCommand(instance.constructor, applicationCommandData);
            this.discordClientService
                .getClient()
                .on(event, (...eventArgs) => __awaiter(this, void 0, void 0, function* () {
                const [interaction] = eventArgs;
                if ((!interaction.isChatInputCommand() &&
                    !interaction.isContextMenuCommand()) ||
                    interaction.commandName !== name) {
                    return;
                }
                let subcommand = null;
                let subcommandGroup = null;
                if (interaction.isChatInputCommand()) {
                    subcommand = interaction.options.getSubcommand(false);
                    subcommandGroup = interaction.options.getSubcommandGroup(false);
                }
                const commandNode = this.commandTreeService.getNode([
                    interaction.commandName,
                    subcommandGroup,
                    subcommand,
                ]);
                const { dtoInstance, instance: commandInstance } = commandNode;
                try {
                    //#region apply middleware, guard, pipe
                    yield this.middlewareExplorer.applyMiddleware(event, eventArgs);
                    const isAllowFromGuards = yield this.guardExplorer.applyGuard({
                        instance: commandInstance,
                        methodName,
                        event,
                        eventArgs,
                    });
                    if (!isAllowFromGuards)
                        return;
                    const pipeResult = yield this.pipeExplorer.applyPipe({
                        instance: commandInstance,
                        methodName,
                        event,
                        metatype: dtoInstance === null || dtoInstance === void 0 ? void 0 : dtoInstance.constructor,
                        eventArgs,
                        initValue: interaction,
                        commandNode,
                    });
                    //#endregion
                    const collectors = yield this.collectorExplorer.applyCollector({
                        instance,
                        methodName,
                        event,
                        eventArgs,
                    });
                    if (!!collectors &&
                        !this.collectorsIsInteraction(collectors) &&
                        !this.collectorsIsMessage(collectors))
                        throw new Error('Collectors cannot be apply');
                    const transformedExecutionContext = {
                        interaction,
                        // TODO: Fix problem with types
                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                        // @ts-ignore
                        collectors,
                    };
                    const executionContext = {
                        // TODO: Fix problem with types
                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                        // @ts-ignore
                        collectors,
                    };
                    const handlerArgs = dtoInstance
                        ? [pipeResult, transformedExecutionContext]
                        : [interaction, executionContext];
                    const replyResult = yield commandInstance[methodName](...handlerArgs);
                    if (replyResult)
                        yield interaction.reply(replyResult);
                }
                catch (exception) {
                    const isTrowException = yield this.filterExplorer.applyFilter({
                        instance: commandInstance,
                        methodName,
                        event,
                        metatype: dtoInstance === null || dtoInstance === void 0 ? void 0 : dtoInstance.constructor,
                        eventArgs,
                        exception,
                        commandNode,
                    });
                    if (isTrowException)
                        throw exception;
                }
            }));
        });
    }
    collectorsIsInteraction(collectors) {
        return collectors.every((collector) => collector instanceof discord_js_1.InteractionCollector);
    }
    collectorsIsMessage(collectors) {
        return collectors.every((collector) => collector instanceof discord_js_1.MessageCollector);
    }
};
CommandExplorer = CommandExplorer_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [client_service_1.ClientService,
        reflect_metadata_provider_1.ReflectMetadataProvider,
        middleware_explorer_1.MiddlewareExplorer,
        discord_command_provider_1.DiscordCommandProvider,
        guard_explorer_1.GuardExplorer,
        core_1.ModuleRef,
        pipe_explorer_1.PipeExplorer,
        build_application_command_service_1.BuildApplicationCommandService,
        command_tree_service_1.CommandTreeService,
        filter_explorer_1.FilterExplorer,
        collector_explorer_1.CollectorExplorer])
], CommandExplorer);
exports.CommandExplorer = CommandExplorer;
//# sourceMappingURL=command.explorer.js.map