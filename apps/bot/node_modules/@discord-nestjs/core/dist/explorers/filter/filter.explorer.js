"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterExplorer = void 0;
const common_1 = require("@nestjs/common");
const reflect_metadata_provider_1 = require("../../providers/reflect-metadata.provider");
const instantiation_service_1 = require("../../services/instantiation.service");
const option_service_1 = require("../../services/option.service");
let FilterExplorer = class FilterExplorer {
    constructor(metadataProvider, discordOptionService, instantiationService) {
        Object.defineProperty(this, "metadataProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: metadataProvider
        });
        Object.defineProperty(this, "discordOptionService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: discordOptionService
        });
        Object.defineProperty(this, "instantiationService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: instantiationService
        });
        Object.defineProperty(this, "cachedFilters", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new WeakMap()
        });
    }
    explore(options) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const { instance, methodName } = options;
            const globalFilters = this.discordOptionService
                .getClientData()
                .useFilters.reverse(); // Like in NestJS
            const classFilters = ((_a = this.metadataProvider.getUseFiltersDecoratorMetadata(instance)) !== null && _a !== void 0 ? _a : []).reverse(); // Like in NestJS
            const methodFilters = ((_b = this.metadataProvider.getUseFiltersDecoratorMetadata(instance, methodName)) !== null && _b !== void 0 ? _b : []).reverse(); // Like in NestJS
            const classType = instance.constructor;
            if (classFilters.length === 0 && methodFilters.length === 0) {
                if (globalFilters.length !== 0)
                    this.cachedFilters.set(classType, {
                        globalFilters,
                        classFilters: [],
                        methodFilters: {},
                    });
                return;
            }
            const hostModule = this.instantiationService.getHostModule(instance);
            const methodFilterInstances = yield this.instantiationService.exploreInstances(methodFilters, hostModule);
            if (this.cachedFilters.has(classType))
                this.cachedFilters.get(classType).methodFilters[methodName] =
                    methodFilterInstances;
            else {
                const classFilterInstances = yield this.instantiationService.exploreInstances(classFilters, hostModule);
                this.cachedFilters.set(classType, {
                    methodFilters: { [methodName]: methodFilterInstances },
                    classFilters: classFilterInstances,
                    globalFilters,
                });
            }
        });
    }
    applyFilter(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { instance, methodName, event, eventArgs, exception, metatype, commandNode, } = options;
            const classType = instance.constructor;
            if (!this.cachedFilters.has(classType))
                return true;
            const { globalFilters, classFilters, methodFilters } = this.cachedFilters.get(classType);
            const exceptionFilters = [
                ...globalFilters,
                ...classFilters,
                ...(methodFilters[methodName] || []),
            ];
            let indexOfAnyException;
            const matchedFilters = exceptionFilters.filter((filter, index) => {
                const catchExceptionTypes = this.metadataProvider.getCatchDecoratorMetadata(filter);
                const isAnyException = catchExceptionTypes.length === 0;
                if (isAnyException && !indexOfAnyException)
                    indexOfAnyException = index;
                const hasConcreteType = catchExceptionTypes.some((expectException) => {
                    const exceptionType = this.getExceptionConstructor(exception);
                    return this.getAllParents(exceptionType)
                        .concat([exceptionType])
                        .includes(expectException);
                });
                return hasConcreteType || isAnyException;
            });
            const [concreteMatchedFilter] = matchedFilters;
            if (concreteMatchedFilter)
                yield concreteMatchedFilter.catch(exception, {
                    event,
                    eventArgs,
                    metatype,
                    commandNode,
                });
            else if (indexOfAnyException)
                yield matchedFilters[indexOfAnyException].catch(exception, {
                    event,
                    eventArgs,
                    metatype,
                    commandNode,
                });
            return !(concreteMatchedFilter || indexOfAnyException);
        });
    }
    getExceptionConstructor(exception) {
        return Array.isArray(exception)
            ? exception[0].constructor
            : exception.constructor;
    }
    getAllParents(error) {
        const classes = [];
        while ((error = Object.getPrototypeOf(error)))
            !Object.getOwnPropertyNames(error).includes('constructor') &&
                error.name !== 'Error' &&
                classes.push(error);
        return classes;
    }
};
FilterExplorer = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [reflect_metadata_provider_1.ReflectMetadataProvider,
        option_service_1.OptionService,
        instantiation_service_1.InstantiationService])
], FilterExplorer);
exports.FilterExplorer = FilterExplorer;
//# sourceMappingURL=filter.explorer.js.map