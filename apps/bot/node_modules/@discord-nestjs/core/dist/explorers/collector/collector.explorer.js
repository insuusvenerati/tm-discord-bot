"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectorExplorer = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const reflect_metadata_provider_1 = require("../../providers/reflect-metadata.provider");
const instantiation_service_1 = require("../../services/instantiation.service");
const filter_explorer_1 = require("../filter/filter.explorer");
const guard_explorer_1 = require("../guard/guard.explorer");
const middleware_explorer_1 = require("../middleware/middleware.explorer");
const pipe_explorer_1 = require("../pipe/pipe.explorer");
const interaction_collector_strategy_1 = require("./strategy/interaction-collector.strategy");
const message_collector_strategy_1 = require("./strategy/message-collector.strategy");
const react_collector_strategy_1 = require("./strategy/react-collector.strategy");
let CollectorExplorer = class CollectorExplorer {
    constructor(metadataProvider, instantiationService, middlewareExplorer, guardExplorer, filterExplorer, pipeExplorer, metadataScanner, reactCollectorStrategy, interactionCollectorStrategy, messageCollectorStrategy) {
        Object.defineProperty(this, "metadataProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: metadataProvider
        });
        Object.defineProperty(this, "instantiationService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: instantiationService
        });
        Object.defineProperty(this, "middlewareExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: middlewareExplorer
        });
        Object.defineProperty(this, "guardExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: guardExplorer
        });
        Object.defineProperty(this, "filterExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: filterExplorer
        });
        Object.defineProperty(this, "pipeExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: pipeExplorer
        });
        Object.defineProperty(this, "metadataScanner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: metadataScanner
        });
        Object.defineProperty(this, "reactCollectorStrategy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: reactCollectorStrategy
        });
        Object.defineProperty(this, "interactionCollectorStrategy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: interactionCollectorStrategy
        });
        Object.defineProperty(this, "messageCollectorStrategy", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: messageCollectorStrategy
        });
        Object.defineProperty(this, "cachedCollectors", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new WeakMap()
        });
        Object.defineProperty(this, "initCollectorInstances", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
    }
    explore({ instance, methodName, }) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const classCollectors = (_a = this.metadataProvider.getUseCollectorsDecoratorMetadata(instance)) !== null && _a !== void 0 ? _a : [];
            const methodCollectors = (_b = this.metadataProvider.getUseCollectorsDecoratorMetadata(instance, methodName)) !== null && _b !== void 0 ? _b : [];
            if (classCollectors.length === 0 && methodCollectors.length === 0)
                return;
            const hostModule = this.instantiationService.getHostModule(instance);
            const moduleRef = hostModule.getProviderByKey(core_1.ModuleRef).instance;
            const methodCollectorInstances = yield this.instantiationService.exploreInstances(methodCollectors, hostModule);
            const methodCollectorInfos = this.getCollectorsInfo(methodCollectorInstances);
            const classType = instance.constructor;
            if (this.cachedCollectors.has(classType))
                this.cachedCollectors.get(classType).methodCollectors[methodName] =
                    methodCollectorInfos;
            else {
                const classCollectorInstances = yield this.instantiationService.exploreInstances(classCollectors, hostModule);
                const classCollectorInfos = this.getCollectorsInfo(classCollectorInstances);
                this.cachedCollectors.set(classType, {
                    methodCollectors: { [methodName]: methodCollectorInfos },
                    classCollectors: classCollectorInfos,
                    moduleRef,
                });
            }
            this.initCollectorInstances.push(...methodCollectorInstances);
        });
    }
    applyCollector(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { instance, methodName } = options;
            const classType = instance.constructor;
            if (!this.cachedCollectors.has(classType))
                return;
            const { classCollectors, methodCollectors, moduleRef } = this.cachedCollectors.get(classType);
            const collectors = [
                ...classCollectors,
                ...(methodCollectors[methodName] || []),
            ];
            return Promise.all(collectors.map((collector) => collector.strategy.setupCollector(options, collector, moduleRef)));
        });
    }
    getInitCollectorInstances() {
        return this.initCollectorInstances;
    }
    getCollectorsInfo(collectorInstances) {
        return collectorInstances.map((collectorInstance) => {
            const { filterMethodName, events } = this.exploreBaseInfo(collectorInstance);
            const reactionMetadata = this.metadataProvider.getReactionCollectorDecoratorMetadata(collectorInstance);
            if (reactionMetadata)
                return {
                    classInstance: collectorInstance,
                    metadata: reactionMetadata,
                    filterMethodName,
                    events,
                    strategy: this.reactCollectorStrategy,
                };
            const messageMetadata = this.metadataProvider.getMessageCollectorDecoratorMetadata(collectorInstance);
            if (messageMetadata)
                return {
                    classInstance: collectorInstance,
                    metadata: messageMetadata,
                    filterMethodName,
                    events,
                    strategy: this.messageCollectorStrategy,
                };
            const interactionMetadata = this.metadataProvider.getInteractionCollectorDecoratorMetadata(collectorInstance);
            if (interactionMetadata)
                return {
                    classInstance: collectorInstance,
                    metadata: interactionMetadata,
                    filterMethodName,
                    events,
                    strategy: this.interactionCollectorStrategy,
                };
        });
    }
    exploreBaseInfo(instance) {
        let filterMethodName;
        const events = {};
        this.getInstanceMethods(instance).forEach((methodName) => {
            let eventMethod = 'on';
            let eventMetadata = this.metadataProvider.getOnCollectEventDecoratorMetadata(instance, methodName);
            if (!eventMetadata) {
                eventMetadata =
                    this.metadataProvider.getOnceCollectEventDecoratorMetadata(instance, methodName);
                eventMethod = 'once';
            }
            if (eventMetadata)
                events[methodName] = {
                    eventName: eventMetadata.event,
                    eventMethod: eventMethod,
                };
            if (filterMethodName)
                return;
            filterMethodName = this.findFilterMethod(instance, methodName);
        });
        return {
            events,
            filterMethodName,
        };
    }
    getInstanceMethods(instance) {
        return this.metadataScanner.scanFromPrototype(instance, Object.getPrototypeOf(instance), (methodName) => methodName);
    }
    findFilterMethod(instance, methodName) {
        const filterMetadata = this.metadataProvider.getFilterDecoratorMetadata(instance, methodName);
        if (filterMetadata)
            return methodName;
    }
};
CollectorExplorer = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [reflect_metadata_provider_1.ReflectMetadataProvider,
        instantiation_service_1.InstantiationService,
        middleware_explorer_1.MiddlewareExplorer,
        guard_explorer_1.GuardExplorer,
        filter_explorer_1.FilterExplorer,
        pipe_explorer_1.PipeExplorer,
        core_1.MetadataScanner,
        react_collector_strategy_1.ReactCollectorStrategy,
        interaction_collector_strategy_1.InteractionCollectorStrategy,
        message_collector_strategy_1.MessageCollectorStrategy])
], CollectorExplorer);
exports.CollectorExplorer = CollectorExplorer;
//# sourceMappingURL=collector.explorer.js.map