"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectorRegister = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const reflect_metadata_provider_1 = require("../../providers/reflect-metadata.provider");
const filter_explorer_1 = require("../filter/filter.explorer");
const guard_explorer_1 = require("../guard/guard.explorer");
const middleware_explorer_1 = require("../middleware/middleware.explorer");
const pipe_explorer_1 = require("../pipe/pipe.explorer");
let CollectorRegister = class CollectorRegister {
    constructor(metadataProvider, metadataScanner, middlewareExplorer, guardExplorer, filterExplorer, pipeExplorer) {
        Object.defineProperty(this, "metadataProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: metadataProvider
        });
        Object.defineProperty(this, "metadataScanner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: metadataScanner
        });
        Object.defineProperty(this, "middlewareExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: middlewareExplorer
        });
        Object.defineProperty(this, "guardExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: guardExplorer
        });
        Object.defineProperty(this, "filterExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: filterExplorer
        });
        Object.defineProperty(this, "pipeExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: pipeExplorer
        });
    }
    subscribeToEvents(collector, events, classInstance) {
        Object.entries(events).forEach(([methodName, { eventMethod, eventName }]) => {
            collector[eventMethod](eventName, (...eventArgs) => __awaiter(this, void 0, void 0, function* () {
                try {
                    //#region apply middleware, guard, pipe
                    yield this.middlewareExplorer.applyMiddleware(eventName, eventArgs);
                    const isAllowFromGuards = yield this.guardExplorer.applyGuard({
                        instance: classInstance,
                        methodName,
                        event: eventName,
                        eventArgs,
                    });
                    if (!isAllowFromGuards)
                        return;
                    const pipeResult = yield this.pipeExplorer.applyPipe({
                        instance: classInstance,
                        methodName,
                        event: eventName,
                        eventArgs,
                        initValue: eventArgs,
                    });
                    //#endregion
                    classInstance[methodName](...(pipeResult || eventArgs));
                }
                catch (exception) {
                    const isTrowException = yield this.filterExplorer.applyFilter({
                        instance: classInstance,
                        methodName,
                        event: eventName,
                        eventArgs,
                        exception,
                    });
                    if (isTrowException)
                        throw exception;
                }
            }));
        });
    }
    registerRequest(moduleRef, classInstance, requestObject) {
        return __awaiter(this, void 0, void 0, function* () {
            if (moduleRef.introspect(classInstance.constructor).scope === common_1.Scope.DEFAULT)
                return classInstance;
            const contextId = core_1.ContextIdFactory.create();
            moduleRef.registerRequestByContextId(requestObject, contextId);
            return moduleRef.resolve(classInstance.constructor, contextId);
        });
    }
};
CollectorRegister = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [reflect_metadata_provider_1.ReflectMetadataProvider,
        core_1.MetadataScanner,
        middleware_explorer_1.MiddlewareExplorer,
        guard_explorer_1.GuardExplorer,
        filter_explorer_1.FilterExplorer,
        pipe_explorer_1.PipeExplorer])
], CollectorRegister);
exports.CollectorRegister = CollectorRegister;
//# sourceMappingURL=collector-register.js.map