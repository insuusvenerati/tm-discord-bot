"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InteractionCollectorStrategy = void 0;
const common_1 = require("@nestjs/common");
const collector_register_1 = require("../collector-register");
let InteractionCollectorStrategy = class InteractionCollectorStrategy {
    constructor(collectorRegister) {
        Object.defineProperty(this, "collectorRegister", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: collectorRegister
        });
    }
    setupCollector({ event, eventArgs }, { metadata, filterMethodName, events, classInstance }, moduleRef) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isMessageEvent(event, eventArgs) &&
                !this.isInteractionEvent(event, eventArgs))
                return;
            const [messageOrInteraction] = eventArgs;
            const interactionCollectorOptions = Object.assign({}, metadata);
            const interactionCollector = messageOrInteraction.channel.createMessageComponentCollector(interactionCollectorOptions);
            const executedClassInstance = yield this.collectorRegister.registerRequest(moduleRef, classInstance, interactionCollector);
            if (filterMethodName)
                interactionCollector.filter = (...filterArgs) => executedClassInstance[filterMethodName](...filterArgs);
            this.collectorRegister.subscribeToEvents(interactionCollector, events, executedClassInstance);
            return interactionCollector;
        });
    }
    isMessageEvent(event, context) {
        return event === 'messageCreate';
    }
    isInteractionEvent(event, context) {
        return event === 'interactionCreate';
    }
};
InteractionCollectorStrategy = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [collector_register_1.CollectorRegister])
], InteractionCollectorStrategy);
exports.InteractionCollectorStrategy = InteractionCollectorStrategy;
//# sourceMappingURL=interaction-collector.strategy.js.map