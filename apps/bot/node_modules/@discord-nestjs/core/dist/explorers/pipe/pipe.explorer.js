"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipeExplorer = void 0;
const common_1 = require("@nestjs/common");
const reflect_metadata_provider_1 = require("../../providers/reflect-metadata.provider");
const instantiation_service_1 = require("../../services/instantiation.service");
const option_service_1 = require("../../services/option.service");
let PipeExplorer = class PipeExplorer {
    constructor(metadataProvider, discordOptionService, instantiationService) {
        Object.defineProperty(this, "metadataProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: metadataProvider
        });
        Object.defineProperty(this, "discordOptionService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: discordOptionService
        });
        Object.defineProperty(this, "instantiationService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: instantiationService
        });
        Object.defineProperty(this, "cachedPipes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new WeakMap()
        });
    }
    explore(options) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const { instance, methodName } = options;
            const globalPipes = this.discordOptionService.getClientData().usePipes;
            const classPipes = (_a = this.metadataProvider.getUsePipesDecoratorMetadata(instance)) !== null && _a !== void 0 ? _a : [];
            const methodPipes = (_b = this.metadataProvider.getUsePipesDecoratorMetadata(instance, methodName)) !== null && _b !== void 0 ? _b : [];
            const classType = instance.constructor;
            if (classPipes.length === 0 && methodPipes.length === 0) {
                if (globalPipes.length !== 0)
                    this.cachedPipes.set(classType, {
                        globalPipes,
                        classPipes: [],
                        methodPipes: {},
                    });
                return;
            }
            const hostModule = this.instantiationService.getHostModule(instance);
            const methodPipeInstances = yield this.instantiationService.exploreInstances(methodPipes, hostModule);
            if (this.cachedPipes.has(classType))
                this.cachedPipes.get(classType).methodPipes[methodName] =
                    methodPipeInstances;
            else {
                const classPipeInstances = yield this.instantiationService.exploreInstances(classPipes, hostModule);
                this.cachedPipes.set(classType, {
                    methodPipes: { [methodName]: methodPipeInstances },
                    classPipes: classPipeInstances,
                    globalPipes,
                });
            }
        });
    }
    applyPipe(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const { instance, methodName, event, eventArgs, initValue, metatype, commandNode, } = options;
            const classType = instance.constructor;
            if (!this.cachedPipes.has(classType))
                return;
            const { globalPipes, classPipes, methodPipes } = this.cachedPipes.get(classType);
            const pipes = [
                ...globalPipes,
                ...classPipes,
                ...(methodPipes[methodName] || []),
            ];
            return pipes.reduce((prev, curr) => __awaiter(this, void 0, void 0, function* () {
                const prevData = yield prev;
                return curr.transform(prevData, {
                    event,
                    eventArgs,
                    metatype,
                    commandNode,
                });
            }), Promise.resolve(initValue));
        });
    }
};
PipeExplorer = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [reflect_metadata_provider_1.ReflectMetadataProvider,
        option_service_1.OptionService,
        instantiation_service_1.InstantiationService])
], PipeExplorer);
exports.PipeExplorer = PipeExplorer;
//# sourceMappingURL=pipe.explorer.js.map