"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandTreeService = void 0;
const common_1 = require("@nestjs/common");
let CommandTreeService = class CommandTreeService {
    constructor() {
        Object.defineProperty(this, "tree", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
    }
    appendNode(path, value) {
        const cleanPath = path.filter((item) => !!item);
        let index = 0;
        let parent = this.tree;
        while (parent && index < cleanPath.length - 1)
            parent = parent[cleanPath[index++]];
        parent[cleanPath[index]] = value;
    }
    getNode(path) {
        let part = this.tree;
        path
            .filter((name) => !!name)
            .forEach((val, index, commandParts) => part && (part = part[commandParts[index]]));
        return part;
    }
    getTree() {
        return this.tree;
    }
};
CommandTreeService = __decorate([
    (0, common_1.Injectable)()
], CommandTreeService);
exports.CommandTreeService = CommandTreeService;
//# sourceMappingURL=command-tree.service.js.map