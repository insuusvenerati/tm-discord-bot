"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExplorerService = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const discord_app_filter_1 = require("../definitions/constants/discord-app-filter");
const discord_app_guard_1 = require("../definitions/constants/discord-app-guard");
const discord_app_pipe_1 = require("../definitions/constants/discord-app-pipe");
const collector_explorer_1 = require("../explorers/collector/collector.explorer");
const command_explorer_1 = require("../explorers/command/command.explorer");
const event_explorer_1 = require("../explorers/event/event.explorer");
const filter_explorer_1 = require("../explorers/filter/filter.explorer");
const guard_explorer_1 = require("../explorers/guard/guard.explorer");
const middleware_explorer_1 = require("../explorers/middleware/middleware.explorer");
const pipe_explorer_1 = require("../explorers/pipe/pipe.explorer");
const prefix_command_explorer_1 = require("../explorers/prefix-command/prefix-command.explorer");
const is_object_1 = require("../utils/function/is-object");
const global_provider_service_1 = require("./global-provider.service");
const option_service_1 = require("./option.service");
const register_command_service_1 = require("./register-command.service");
let ExplorerService = class ExplorerService {
    constructor(discoveryService, metadataScanner, filterExplorer, eventExplorer, guardExplorer, pipeExplorer, middlewareExplorer, commandExplorer, globalProviderService, registerCommandService, collectorExplorer, prefixCommandExplorer, discordOptionService) {
        Object.defineProperty(this, "discoveryService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: discoveryService
        });
        Object.defineProperty(this, "metadataScanner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: metadataScanner
        });
        Object.defineProperty(this, "filterExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: filterExplorer
        });
        Object.defineProperty(this, "eventExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: eventExplorer
        });
        Object.defineProperty(this, "guardExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: guardExplorer
        });
        Object.defineProperty(this, "pipeExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: pipeExplorer
        });
        Object.defineProperty(this, "middlewareExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: middlewareExplorer
        });
        Object.defineProperty(this, "commandExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: commandExplorer
        });
        Object.defineProperty(this, "globalProviderService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: globalProviderService
        });
        Object.defineProperty(this, "registerCommandService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: registerCommandService
        });
        Object.defineProperty(this, "collectorExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: collectorExplorer
        });
        Object.defineProperty(this, "prefixCommandExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: prefixCommandExplorer
        });
        Object.defineProperty(this, "discordOptionService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: discordOptionService
        });
    }
    onModuleInit() {
        return __awaiter(this, void 0, void 0, function* () {
            const providers = this.discoveryService.getProviders();
            const controllers = this.discoveryService.getControllers();
            yield this.exploreDecorators(providers, controllers);
        });
    }
    exploreDecorators(providers, controllers) {
        return __awaiter(this, void 0, void 0, function* () {
            const { globalLifecycleParts, restProviders } = this.globalProviderService.filterGlobalProviders(providers);
            const sortedGlobalProviders = this.globalProviderService.sortGlobalProviders(globalLifecycleParts);
            sortedGlobalProviders.forEach(({ token, instance }) => {
                const [globalToken] = token.split(':');
                switch (globalToken) {
                    case discord_app_pipe_1.DISCORD_APP_PIPE:
                        return !this.discordOptionService.addPipe(instance);
                    case discord_app_guard_1.DISCORD_APP_GUARD:
                        return !this.discordOptionService.addGuard(instance);
                    case discord_app_filter_1.DISCORD_APP_FILTER:
                        return !this.discordOptionService.addFilter(instance);
                }
            });
            const methodExplorers = [this.eventExplorer, this.prefixCommandExplorer];
            const classExplorers = [this.commandExplorer, this.middlewareExplorer];
            const lifecyclePartsExplorers = [
                this.guardExplorer,
                this.pipeExplorer,
                this.filterExplorer,
            ];
            yield Promise.all(restProviders
                .concat(controllers)
                .map(({ instance }) => __awaiter(this, void 0, void 0, function* () {
                if (!instance || !(0, is_object_1.IsObject)(instance))
                    return;
                yield Promise.all(classExplorers.map((explorer) => explorer.explore({ instance })));
                const methodNames = this.scanMetadata(instance);
                yield this.exploreClassOrMethod(lifecyclePartsExplorers.concat([this.collectorExplorer]), instance, methodNames);
                yield Promise.all(methodExplorers.map((explorer) => Promise.all(methodNames.map((methodName) => explorer.explore({
                    instance,
                    methodName,
                })))));
            })));
            yield Promise.all(this.collectorExplorer.getInitCollectorInstances().map((instance) => {
                const methodNames = this.scanMetadata(instance);
                return this.exploreClassOrMethod(lifecyclePartsExplorers, instance, methodNames);
            }));
            yield this.registerCommandService.register();
        });
    }
    exploreClassOrMethod(explorers, instance, methodNames) {
        return Promise.all(explorers.map((explorer) => __awaiter(this, void 0, void 0, function* () {
            var e_1, _a;
            if (methodNames.length)
                try {
                    for (var methodNames_1 = __asyncValues(methodNames), methodNames_1_1; methodNames_1_1 = yield methodNames_1.next(), !methodNames_1_1.done;) {
                        const methodName = methodNames_1_1.value;
                        yield explorer.explore({ instance, methodName });
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (methodNames_1_1 && !methodNames_1_1.done && (_a = methodNames_1.return)) yield _a.call(methodNames_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            yield explorer.explore({ instance });
        })));
    }
    scanMetadata(instance) {
        return this.metadataScanner.scanFromPrototype(instance, Object.getPrototypeOf(instance), (methodName) => methodName);
    }
};
ExplorerService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [core_1.DiscoveryService,
        core_1.MetadataScanner,
        filter_explorer_1.FilterExplorer,
        event_explorer_1.EventExplorer,
        guard_explorer_1.GuardExplorer,
        pipe_explorer_1.PipeExplorer,
        middleware_explorer_1.MiddlewareExplorer,
        command_explorer_1.CommandExplorer,
        global_provider_service_1.GlobalProviderService,
        register_command_service_1.RegisterCommandService,
        collector_explorer_1.CollectorExplorer,
        prefix_command_explorer_1.PrefixCommandExplorer,
        option_service_1.OptionService])
], ExplorerService);
exports.ExplorerService = ExplorerService;
//# sourceMappingURL=explorer.service.js.map