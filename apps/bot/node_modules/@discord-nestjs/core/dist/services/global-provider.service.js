"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalProviderService = void 0;
const common_1 = require("@nestjs/common");
const discord_app_filter_1 = require("../definitions/constants/discord-app-filter");
const discord_app_guard_1 = require("../definitions/constants/discord-app-guard");
const discord_app_pipe_1 = require("../definitions/constants/discord-app-pipe");
class ProviderGroup {
    constructor() {
        /**
         * Filters, pipes and guards
         */
        Object.defineProperty(this, "globalLifecycleParts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        /**
         * Other providers
         */
        Object.defineProperty(this, "restProviders", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
    }
}
let GlobalProviderService = class GlobalProviderService {
    filterGlobalProviders(providers = []) {
        return providers.reduce((providerGroup, instanceWrapper) => {
            this.isGlobalToken(instanceWrapper.token)
                ? providerGroup.globalLifecycleParts.push(instanceWrapper)
                : providerGroup.restProviders.push(instanceWrapper);
            return providerGroup;
        }, new ProviderGroup());
    }
    sortGlobalProviders(providers) {
        return providers.sort((first, second) => {
            const priorityA = first.token.split(':').at(1);
            const priorityB = second.token.split(':').at(1);
            return parseInt(priorityA) - parseInt(priorityB);
        });
    }
    isGlobalToken(token) {
        if (token && typeof token === 'string') {
            const [globalToken] = token.split(':');
            return [discord_app_pipe_1.DISCORD_APP_PIPE, discord_app_guard_1.DISCORD_APP_GUARD, discord_app_filter_1.DISCORD_APP_FILTER].includes(globalToken);
        }
        return false;
    }
};
GlobalProviderService = __decorate([
    (0, common_1.Injectable)()
], GlobalProviderService);
exports.GlobalProviderService = GlobalProviderService;
//# sourceMappingURL=global-provider.service.js.map