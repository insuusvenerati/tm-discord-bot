"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var RegisterCommandService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegisterCommandService = void 0;
const common_1 = require("@nestjs/common");
const discord_js_1 = require("discord.js");
const inject_discord_client_decorator_1 = require("../decorators/client/inject-discord-client.decorator");
const discord_command_provider_1 = require("../providers/discord-command.provider");
const option_service_1 = require("./option.service");
let RegisterCommandService = RegisterCommandService_1 = class RegisterCommandService {
    constructor(discordCommandProvider, client, discordOptionService) {
        Object.defineProperty(this, "discordCommandProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: discordCommandProvider
        });
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: client
        });
        Object.defineProperty(this, "discordOptionService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: discordOptionService
        });
        Object.defineProperty(this, "logger", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new common_1.Logger(RegisterCommandService_1.name)
        });
    }
    register() {
        return __awaiter(this, void 0, void 0, function* () {
            const options = this.discordOptionService.getClientData();
            this.client.on('ready', () => this.registerCommands(this.client, options));
        });
    }
    registerCommands(client, { registerCommandOptions }) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const commands = this.discordCommandProvider.getAllCommands();
            if (commands.size === 0)
                return;
            const commandList = Array.from(commands.values());
            if (!((_a = client.application) === null || _a === void 0 ? void 0 : _a.owner))
                yield ((_b = client.application) === null || _b === void 0 ? void 0 : _b.fetch());
            yield Promise.all(registerCommandOptions.map((commandOptions) => __awaiter(this, void 0, void 0, function* () {
                const { allowFactory, trigger } = commandOptions;
                const register = () => __awaiter(this, void 0, void 0, function* () {
                    if (allowFactory) {
                        client.on('messageCreate', (message) => __awaiter(this, void 0, void 0, function* () {
                            if (!allowFactory(message, commandList))
                                return;
                            yield this.setupCommands(commandList, commandOptions);
                        }));
                    }
                    else
                        yield this.setupCommands(commandList, commandOptions);
                });
                if (trigger)
                    trigger(commandList).subscribe({
                        next: () => __awaiter(this, void 0, void 0, function* () {
                            yield register();
                        }),
                    });
                else
                    yield register();
            })));
        });
    }
    dropMissingCommands(existCommands, commandList) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteCommands = existCommands.filter((existCommand) => !commandList.find((newCommand) => existCommand.name === newCommand.name &&
                existCommand.type === newCommand.type));
            yield Promise.all(deleteCommands.map((command) => command.delete()));
        });
    }
    splitByCommands(existCommandList, commandList) {
        return commandList.reduce((result, newCommand) => {
            const alreadyExist = existCommandList.find((existCommand) => newCommand.name === existCommand.name &&
                newCommand.type === existCommand.type);
            alreadyExist
                ? result[1].push({
                    existCommand: alreadyExist,
                    newCommand,
                })
                : result[0].push(newCommand);
            return result;
        }, [[], []]);
    }
    setupCommands(commandList, { forGuild, removeCommandsBefore }) {
        return __awaiter(this, void 0, void 0, function* () {
            // Fetch guild or global commands
            const options = forGuild && {
                guildId: forGuild,
            };
            const existCommandList = yield this.client.application.commands.fetch(options);
            // Remove if needed
            if (removeCommandsBefore) {
                yield this.dropMissingCommands(existCommandList, commandList);
                this.logger.log(`All ${forGuild ? 'guild' : 'global'} commands removed!`);
            }
            let registeredCommands = [];
            const [createCommands, editCommands] = this.splitByCommands(existCommandList, commandList);
            // Edit existing commands
            if (editCommands.length !== 0) {
                const editedCommands = yield Promise.all(editCommands.map(({ existCommand, newCommand }) => existCommand.edit(newCommand)));
                registeredCommands = registeredCommands.concat(editedCommands);
            }
            // Create new commands
            if (createCommands.length !== 0) {
                const createdCommands = yield this.client.application.commands.set(commandList, forGuild);
                registeredCommands = registeredCommands.concat(Array.from(createdCommands.values()));
            }
            this.logger.log(`All ${forGuild ? 'guild' : 'global'} commands are registered!`);
            return registeredCommands;
        });
    }
};
RegisterCommandService = RegisterCommandService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(1, (0, inject_discord_client_decorator_1.InjectDiscordClient)()),
    __metadata("design:paramtypes", [discord_command_provider_1.DiscordCommandProvider,
        discord_js_1.Client,
        option_service_1.OptionService])
], RegisterCommandService);
exports.RegisterCommandService = RegisterCommandService;
//# sourceMappingURL=register-command.service.js.map