"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionService = void 0;
const common_1 = require("@nestjs/common");
let OptionService = class OptionService {
    constructor() {
        Object.defineProperty(this, "options", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.options = {
            token: null,
            discordClientOptions: {
                intents: [],
            },
            useGuards: [],
            usePipes: [],
            useFilters: [],
            registerCommandOptions: [{}],
            autoLogin: true,
            failOnLogin: false,
        };
    }
    updateOptions(options) {
        this.options = Object.assign(Object.assign({}, this.options), options);
    }
    addPipe(pipe) {
        return this.options.usePipes.push(pipe);
    }
    addGuard(guard) {
        return this.options.useGuards.push(guard);
    }
    addFilter(filter) {
        return this.options.useFilters.push(filter);
    }
    getClientData() {
        return this.options;
    }
};
OptionService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [])
], OptionService);
exports.OptionService = OptionService;
//# sourceMappingURL=option.service.js.map