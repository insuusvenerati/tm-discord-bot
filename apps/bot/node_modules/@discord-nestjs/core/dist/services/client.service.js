"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var ClientService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientService = void 0;
const common_1 = require("@nestjs/common");
const discord_js_1 = require("discord.js");
const option_service_1 = require("./option.service");
let ClientService = ClientService_1 = class ClientService {
    constructor(discordOptionService) {
        Object.defineProperty(this, "discordOptionService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: discordOptionService
        });
        Object.defineProperty(this, "logger", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new common_1.Logger(ClientService_1.name)
        });
        Object.defineProperty(this, "webhookClient", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    initClient(options) {
        this.discordOptionService.updateOptions(options);
        const { token, webhook, discordClientOptions } = this.discordOptionService.getClientData();
        this.client = new discord_js_1.Client(discordClientOptions);
        this.client.token = token;
        this.webhookClient = this.createWebhookClient(webhook);
    }
    getClient() {
        return this.client;
    }
    setupClient(setupFunction) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!setupFunction)
                return;
            yield setupFunction(this.client);
        });
    }
    getWebhookClient() {
        return this.webhookClient;
    }
    onApplicationBootstrap() {
        return __awaiter(this, void 0, void 0, function* () {
            const { autoLogin, failOnLogin } = this.discordOptionService.getClientData();
            if (!autoLogin)
                return;
            try {
                yield this.client.login();
            }
            catch (error) {
                this.logger.error('Failed to connect to Discord API');
                this.logger.error(error);
                if (failOnLogin)
                    throw error;
            }
        });
    }
    onApplicationShutdown() {
        this.client.destroy();
    }
    createWebhookClient(webhookOptions) {
        if (!webhookOptions)
            return;
        return new discord_js_1.WebhookClient(webhookOptions);
    }
};
ClientService = ClientService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [option_service_1.OptionService])
], ClientService);
exports.ClientService = ClientService;
//# sourceMappingURL=client.service.js.map