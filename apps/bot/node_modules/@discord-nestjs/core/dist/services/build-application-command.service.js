"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildApplicationCommandService = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const discord_js_1 = require("discord.js");
const is_sub_command_group_1 = require("../decorators/sub-command-group/is-sub-command-group");
const option_explorer_1 = require("../explorers/option/option.explorer");
const reflect_metadata_provider_1 = require("../providers/reflect-metadata.provider");
const command_tree_service_1 = require("./command-tree.service");
const dto_service_1 = require("./dto.service");
let BuildApplicationCommandService = class BuildApplicationCommandService {
    constructor(moduleRef, metadataProvider, optionExplorer, commandTreeService, dtoService) {
        Object.defineProperty(this, "moduleRef", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: moduleRef
        });
        Object.defineProperty(this, "metadataProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: metadataProvider
        });
        Object.defineProperty(this, "optionExplorer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: optionExplorer
        });
        Object.defineProperty(this, "commandTreeService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: commandTreeService
        });
        Object.defineProperty(this, "dtoService", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: dtoService
        });
    }
    exploreCommandOptions(instance, methodName, { name, description, include = [], dmPermission, defaultMemberPermissions, type = discord_js_1.ApplicationCommandType.ChatInput, nameLocalizations, descriptionLocalizations, }) {
        return __awaiter(this, void 0, void 0, function* () {
            this.commandTreeService.appendNode([name], { instance });
            const applicationCommandData = {
                type,
                name,
                description,
                dmPermission,
                defaultMemberPermissions,
                nameLocalizations,
                descriptionLocalizations,
            };
            if (applicationCommandData.type === discord_js_1.ApplicationCommandType.ChatInput)
                applicationCommandData.options = yield this.exploreSubCommandOptions(name, include);
            const dtoInstance = yield this.dtoService.createDtoInstance(instance, methodName);
            if (dtoInstance) {
                this.commandTreeService.appendNode([name, 'dtoInstance'], dtoInstance);
                const commandOptions = this.dtoService.exploreDtoOptions(dtoInstance);
                if (applicationCommandData.type === discord_js_1.ApplicationCommandType.ChatInput)
                    applicationCommandData.options = applicationCommandData.options.concat(this.sortByRequired(commandOptions));
            }
            return applicationCommandData;
        });
    }
    exploreSubCommandOptions(commandName, rawCommandOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.all(rawCommandOptions.map((item) => {
                if ((0, is_sub_command_group_1.isSubCommandGroup)(item))
                    return this.getSubCommandGroupOptions(item(), commandName);
                return this.getSubCommandOptions(item, commandName);
            }));
        });
    }
    getSubCommandGroupOptions({ options: { name, description, nameLocalizations, descriptionLocalizations, }, subCommands, }, commandName) {
        return __awaiter(this, void 0, void 0, function* () {
            this.commandTreeService.appendNode([commandName, name], {});
            const subCommandOptions = yield Promise.all(subCommands.map((subCommandType) => this.getSubCommandOptions(subCommandType, commandName, name)));
            return {
                name,
                description,
                type: discord_js_1.ApplicationCommandOptionType.SubcommandGroup,
                options: subCommandOptions,
                nameLocalizations,
                descriptionLocalizations,
            };
        });
    }
    getSubCommandOptions(subCommandType, commandName, subGroupName) {
        return __awaiter(this, void 0, void 0, function* () {
            const subCommandInstance = this.moduleRef.get(subCommandType, {
                strict: false,
            });
            const metadata = this.metadataProvider.getSubCommandDecoratorMetadata(subCommandInstance);
            if (!metadata)
                throw new Error(`Passed class is not a subcommand`);
            this.commandTreeService.appendNode([commandName, subGroupName, metadata.name], { instance: subCommandInstance });
            const methodName = 'handler';
            const dtoInstance = yield this.dtoService.createDtoInstance(subCommandInstance, methodName);
            const applicationSubCommandData = {
                name: metadata.name,
                description: metadata.description,
                type: discord_js_1.ApplicationCommandOptionType.Subcommand,
                nameLocalizations: metadata.nameLocalizations,
                descriptionLocalizations: metadata.descriptionLocalizations,
            };
            if (dtoInstance) {
                this.commandTreeService.appendNode([commandName, subGroupName, metadata.name, 'dtoInstance'], dtoInstance);
                const commandOptions = this.dtoService.exploreDtoOptions(dtoInstance);
                if (commandOptions.length !== 0)
                    applicationSubCommandData.options = this.sortByRequired(commandOptions);
            }
            return applicationSubCommandData;
        });
    }
    sortByRequired(options) {
        return options.sort((first, second) => first.required > second.required ? -1 : 1);
    }
};
BuildApplicationCommandService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [core_1.ModuleRef,
        reflect_metadata_provider_1.ReflectMetadataProvider,
        option_explorer_1.OptionExplorer,
        command_tree_service_1.CommandTreeService,
        dto_service_1.DtoService])
], BuildApplicationCommandService);
exports.BuildApplicationCommandService = BuildApplicationCommandService;
//# sourceMappingURL=build-application-command.service.js.map