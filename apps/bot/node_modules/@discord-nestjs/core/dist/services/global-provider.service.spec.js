"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const register_filter_globally_1 = require("../utils/function/register-filter-globally");
const register_guard_globally_1 = require("../utils/function/register-guard-globally");
const register_pipe_globally_1 = require("../utils/function/register-pipe-globally");
const global_provider_service_1 = require("./global-provider.service");
describe('Global provider service', () => {
    let moduleFixture;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        moduleFixture = yield testing_1.Test.createTestingModule({
            providers: [global_provider_service_1.GlobalProviderService],
        }).compile();
    }));
    describe('sortGlobalProviders method', () => {
        it('should correct sort', () => {
            const mockedGlobalGuardProviders = [
                { token: (0, register_guard_globally_1.registerGuardGlobally)() },
                { token: (0, register_guard_globally_1.registerGuardGlobally)(1) },
                { token: (0, register_guard_globally_1.registerGuardGlobally)(2) },
                { token: (0, register_guard_globally_1.registerGuardGlobally)(11) },
            ];
            const mockedGlobalPipeProviders = [
                { token: (0, register_pipe_globally_1.registerPipeGlobally)(1) },
                { token: (0, register_pipe_globally_1.registerPipeGlobally)() },
            ];
            const mockedGlobalFilterProviders = [
                { token: (0, register_filter_globally_1.registerFilterGlobally)(1) },
                { token: (0, register_filter_globally_1.registerFilterGlobally)(2) },
                { token: (0, register_filter_globally_1.registerFilterGlobally)(0) },
                { token: (0, register_filter_globally_1.registerFilterGlobally)(3) },
            ];
            const result = moduleFixture
                .get(global_provider_service_1.GlobalProviderService)
                .sortGlobalProviders([
                ...mockedGlobalGuardProviders,
                ...mockedGlobalPipeProviders,
                ...mockedGlobalFilterProviders,
            ]);
            expect(result).toMatchInlineSnapshot(`
        Array [
          Object {
            "token": "__discord_app_guard__:0",
          },
          Object {
            "token": "__discord_app_pipe__:0",
          },
          Object {
            "token": "__discord_app_filter__:0",
          },
          Object {
            "token": "__discord_app_guard__:1",
          },
          Object {
            "token": "__discord_app_pipe__:1",
          },
          Object {
            "token": "__discord_app_filter__:1",
          },
          Object {
            "token": "__discord_app_guard__:2",
          },
          Object {
            "token": "__discord_app_filter__:2",
          },
          Object {
            "token": "__discord_app_filter__:3",
          },
          Object {
            "token": "__discord_app_guard__:11",
          },
        ]
      `);
        });
    });
});
//# sourceMappingURL=global-provider.service.spec.js.map