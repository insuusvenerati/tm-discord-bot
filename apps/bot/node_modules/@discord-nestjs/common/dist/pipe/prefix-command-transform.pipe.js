"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrefixCommandTransformPipe = void 0;
const core_1 = require("@discord-nestjs/core");
const common_1 = require("@nestjs/common");
const class_transformer_1 = require("class-transformer");
const transformer_options_constant_1 = require("../contants/transformer-options.constant");
let PrefixCommandTransformPipe = class PrefixCommandTransformPipe {
    constructor(metadataProvider, classTransformerOptions) {
        Object.defineProperty(this, "metadataProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: metadataProvider
        });
        Object.defineProperty(this, "classTransformerOptions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: classTransformerOptions
        });
    }
    transform(message, metadata) {
        if (!metadata.metatype || !message)
            return;
        const { dtoInstance } = metadata.commandNode;
        const plainObject = {};
        const messageContentParts = message.content.split(' ');
        let lastIndex = 0;
        Object.keys(dtoInstance).forEach((property) => {
            const argNumMetadata = this.metadataProvider.getArgNumDecoratorMetadata(dtoInstance, property);
            if (argNumMetadata) {
                const argPositions = argNumMetadata(lastIndex);
                plainObject[property] = this.getArgNumValue(messageContentParts, argPositions);
                lastIndex = argPositions.position;
                return;
            }
            const argRangeMetadata = this.metadataProvider.getArgRangeDecoratorMetadata(dtoInstance, property);
            if (argRangeMetadata) {
                const argPositions = argRangeMetadata(lastIndex);
                plainObject[property] = this.getArgRangeValue(messageContentParts, argRangeMetadata(lastIndex));
                lastIndex = argPositions.toPosition
                    ? argPositions.toPosition
                    : messageContentParts.length - 1;
                return;
            }
        });
        return (0, class_transformer_1.plainToInstance)(metadata.metatype, plainObject, this.classTransformerOptions);
    }
    getArgNumValue(inputPart, item) {
        return inputPart[item.position];
    }
    getArgRangeValue(inputPart, item) {
        item.toPosition =
            item.toPosition !== undefined ? item.toPosition : inputPart.length;
        return inputPart.slice(item.formPosition, item.toPosition);
    }
};
PrefixCommandTransformPipe = __decorate([
    (0, common_1.Injectable)(),
    __param(1, (0, common_1.Optional)()),
    __param(1, (0, common_1.Inject)(transformer_options_constant_1.TRANSFORMER_OPTION)),
    __metadata("design:paramtypes", [core_1.ReflectMetadataProvider, Object])
], PrefixCommandTransformPipe);
exports.PrefixCommandTransformPipe = PrefixCommandTransformPipe;
//# sourceMappingURL=prefix-command-transform.pipe.js.map